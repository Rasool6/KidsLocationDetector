package com.variable.kidslocationdetector;import android.app.ActivityManager;import android.app.Notification;import android.app.NotificationChannel;import android.app.NotificationManager;import android.app.PendingIntent;import android.app.Service;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.content.res.Configuration;import android.location.Location;import android.os.Binder;import android.os.Build;import android.os.Handler;import android.os.HandlerThread;import android.os.IBinder;import android.os.Looper;import androidx.annotation.NonNull;import androidx.core.app.NotificationCompat;import androidx.localbroadcastmanager.content.LocalBroadcastManager;import android.util.Log;import android.widget.Toast;import com.google.android.gms.location.FusedLocationProviderClient;import com.google.android.gms.location.LocationCallback;import com.google.android.gms.location.LocationRequest;import com.google.android.gms.location.LocationResult;import com.google.android.gms.location.LocationServices;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.OnFailureListener;import com.google.android.gms.tasks.OnSuccessListener;import com.google.android.gms.tasks.Task;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.Timer;import java.util.TimerTask;public class HistorySaveService extends Service {    private static final String PACKAGE_NAME =            "com.google.android.gms.location.sample.locationupdatesforegroundservice";    private static final String TAG = HistorySaveService.class.getSimpleName();    /**     * The name of the channel for notifications.     */    private static final String CHANNEL_ID = "channel_01";    static final String ACTION_BROADCAST = PACKAGE_NAME + ".broadcast";    static final String EXTRA_LOCATION = PACKAGE_NAME + ".location";    private static final String EXTRA_STARTED_FROM_NOTIFICATION = PACKAGE_NAME +            ".started_from_notification";    private final IBinder mBinder = new LocalBinder();    /**     * The desired interval for location updates. Inexact. Updates may be more or less frequent.     */    private static final long UPDATE_INTERVAL_IN_MILLISECONDS = 40000;    /**     * The fastest rate for active location updates. Updates will never be more frequent     * than this value.     */    private static final long FASTEST_UPDATE_INTERVAL_IN_MILLISECONDS =            UPDATE_INTERVAL_IN_MILLISECONDS / 2;    /**     * The identifier for the notification displayed for the foreground service.     */    private static final int NOTIFICATION_ID = 12345678;    /**     * Used to check whether the bound activity has really gone away and not unbound as part of an     * orientation change. We create a foreground service notification only if the former takes     * place.     */    private boolean mChangingConfiguration = false;    private NotificationManager mNotificationManager;    /**     * Contains parameters used by {@link com.google.android.gms.location.FusedLocationProviderApi}.     */    private LocationRequest mLocationRequest;    /**     * Provides access to the Fused Location Provider API.     */    private FusedLocationProviderClient mFusedLocationClient;    /**     * Callback for changes in location.     */    private LocationCallback mLocationCallback;    private Handler mServiceHandler;    /**     * The current location.     */    private Location mLocation;    Context context;    Handler handler;    Timer timer;    public HistorySaveService() {    }    @Override    public void onCreate() {        mFusedLocationClient = LocationServices.getFusedLocationProviderClient(this);        mLocationCallback = new LocationCallback() {            @Override            public void onLocationResult(LocationResult locationResult) {                super.onLocationResult(locationResult);                onNewLocation(locationResult.getLastLocation());            }        };        createLocationRequest();        getLastLocation();        HandlerThread handlerThread = new HandlerThread(TAG);        handlerThread.start();        mServiceHandler = new Handler(handlerThread.getLooper());        mNotificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);        // Android O requires a Notification Channel.        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            CharSequence name = getString(R.string.app_name);            // Create the channel for the notification            NotificationChannel mChannel =                    new NotificationChannel(CHANNEL_ID, name, NotificationManager.IMPORTANCE_DEFAULT);            // Set the Notification Channel for the Notification Manager.            mNotificationManager.createNotificationChannel(mChannel);        }    }    @Override    public int onStartCommand(Intent intent, int flags, int startId) {        Log.i(TAG, "Service started");        boolean startedFromNotification = intent.getBooleanExtra(EXTRA_STARTED_FROM_NOTIFICATION,                false);        // We got here because the user decided to remove location updates from the notification.        if (startedFromNotification) {            removeLocationUpdates();            stopSelf();        }        // Tells the system to not try to recreate the service after it has been killed.        return START_NOT_STICKY;    }    @Override    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);        mChangingConfiguration = true;    }    @Override    public IBinder onBind(Intent intent) {        // Called when a client (MainActivity in case of this sample) comes to the foreground        // and binds with this service. The service should cease to be a foreground service        // when that happens.        Log.i(TAG, "in onBind()");        stopForeground(true);        mChangingConfiguration = false;        return mBinder;    }    @Override    public void onRebind(Intent intent) {        // Called when a client (MainActivity in case of this sample) returns to the foreground        // and binds once again with this service. The service should cease to be a foreground        // service when that happens.        Log.i(TAG, "in onRebind()");        stopForeground(true);        mChangingConfiguration = false;        super.onRebind(intent);    }    @Override    public boolean onUnbind(Intent intent) {        Log.i(TAG, "Last client unbound from service");        // Called when the last client (MainActivity in case of this sample) unbinds from this        // service. If this method is called due to a configuration change in MainActivity, we        // do nothing. Otherwise, we make this service a foreground service.        if (!mChangingConfiguration && Utils.requestingLocationUpdates(this)) {            Log.i(TAG, "Starting foreground service");            startForeground(NOTIFICATION_ID, getNotification());        }        return true; // Ensures onRebind() is called when a client re-binds.    }    @Override    public void onDestroy() {        mServiceHandler.removeCallbacksAndMessages(null);    }    /**     * Makes a request for location updates. Note that in this sample we merely log the     * {@link SecurityException}.     */    public void requestLocationUpdates() {        Log.i(TAG, "Requesting location updates");        Utils.setRequestingLocationUpdates(this, true);        startService(new Intent(getApplicationContext(), HistorySaveService.class));        try {            mFusedLocationClient.requestLocationUpdates(mLocationRequest,                    mLocationCallback, Looper.myLooper());        } catch (SecurityException unlikely) {            Utils.setRequestingLocationUpdates(this, false);            Log.e(TAG, "Lost location permission. Could not request updates. " + unlikely);        }    }    /**     * Removes location updates. Note that in this sample we merely log the     * {@link SecurityException}.     */    public void removeLocationUpdates() {        Log.i(TAG, "Removing location updates");        try {            mFusedLocationClient.removeLocationUpdates(mLocationCallback);            Utils.setRequestingLocationUpdates(this, false);            stopSelf();        } catch (SecurityException unlikely) {            Utils.setRequestingLocationUpdates(this, true);            Log.e(TAG, "Lost location permission. Could not remove updates. " + unlikely);        }    }    /**     * Returns the {@link NotificationCompat} used as part of the foreground service.     */    private Notification getNotification() {        Intent intent = new Intent(this, HistorySaveService.class);        CharSequence text = Utils.getLocationText(mLocation);        // Extra to help us figure out if we arrived in onStartCommand via the notification or not.        intent.putExtra(EXTRA_STARTED_FROM_NOTIFICATION, true);        // The PendingIntent that leads to a call to onStartCommand() in this service.        PendingIntent servicePendingIntent = PendingIntent.getService(this, 0, intent,                PendingIntent.FLAG_UPDATE_CURRENT);        // The PendingIntent to launch activity.        PendingIntent activityPendingIntent = PendingIntent.getActivity(this, 0,                new Intent(this, MainActivity.class), 0);        NotificationCompat.Builder builder = new NotificationCompat.Builder(this)                .addAction(R.drawable.ic_launcher_background, getString(R.string.launch_activity),                        activityPendingIntent)                .addAction(R.drawable.ic_launcher_foreground, getString(R.string.remove_location_updates),                        servicePendingIntent)                .setContentText(text)                .setContentTitle(Utils.getLocationTitle(this))                .setOngoing(true)                .setPriority(Notification.PRIORITY_HIGH)                .setSmallIcon(R.mipmap.ic_launcher)                .setTicker(text)                .setWhen(System.currentTimeMillis());        // Set the Channel ID for Android O.        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            builder.setChannelId(CHANNEL_ID); // Channel ID        }        return builder.build();    }    private void getLastLocation() {        try {            mFusedLocationClient.getLastLocation()                    .addOnCompleteListener(new OnCompleteListener<Location>() {                        @Override                        public void onComplete(@NonNull Task<Location> task) {                            if (task.isSuccessful() && task.getResult() != null) {                                mLocation = task.getResult();                            } else {                                Log.w(TAG, "Failed to get location.");                            }                        }                    });        } catch (SecurityException unlikely) {            Log.e(TAG, "Lost location permission." + unlikely);        }    }    private void onNewLocation(Location location) {        Log.i(TAG, "New location: " + location);        mLocation = location;        // Notify anyone listening for broadcasts about the new location.        Intent intent = new Intent(ACTION_BROADCAST);        intent.putExtra(EXTRA_LOCATION, location);        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);        // Update notification content if running as a foreground service.//        if (serviceIsRunningInForeground(this)) {//            mNotificationManager.notify(NOTIFICATION_ID, getNotification());        Constants.latForground= String.valueOf(location.getLatitude());        Constants.lngForground= String.valueOf(location.getLongitude());        Log.e("latttt",Constants.latForground+"");        Log.e("lngggg",Constants.lngForground+"");//        handler = new Handler();//        timer= new Timer();//        TimerTask doAsynchronousTask = new TimerTask() {//            @Override//            public void run() {//                handler.post(new Runnable() {//                    @SuppressWarnings("unchecked")//                    public void run() {//                        try {//                            Log.d("runing","show");//                            Toast.makeText(context, "show toast", Toast.LENGTH_SHORT).show();////                                    String str_startTime1 = preferences.getString("time", "");////////                                    Date startDate = null;////                                    try {////                                        startDate = df1.parse(str_startTime1);////                                    } catch (ParseException e) {////                                        e.printStackTrace();////                                    }////                                    Date endDate = null;////                                    try {////                                        String startTime2 = df1.format(Calendar.getInstance().getTime());////                                        endDate = df1.parse(startTime2);////                                    } catch (ParseException e) {////                                        e.printStackTrace();////                                    }//////                                    long difference = endDate.getTime() - startDate.getTime();//////                            if (difference < 0) {//////                                Date dateMax = null;//////                                try {//////                                    dateMax = df1.parse("24:00");//////                                } catch (ParseException e) {//////                                    e.printStackTrace();//////                                }//////                                Date dateMin = null;//////                                try {//////                                    dateMin = df1.parse("00:00");//////                                } catch (ParseException e) {//////                                    e.printStackTrace();//////                                }//////                                difference = (dateMax.getTime() - startDate.getTime()) + (endDate.getTime() - dateMin.getTime());//////                            }////                                    int days = (int) (difference / (1000 * 60 * 60 * 24));////                                    int hours = (int) ((difference - (1000 * 60 * 60 * 24 * days)) / (1000 * 60 * 60));////                                    int min = (int) (difference - (1000 * 60 * 60 * 24 * days) - (1000 * 60 * 60 * hours)) / (1000 * 60);////                                    Log.i("log_tag", "Hours: " + hours + ", Mins: " + min+"hassan"+difference);////                                    if(min%2==0){////                                        if(!preferences.contains("insert")){////                                            if(preferences.getInt("insert",0)==0) {////                                                SharedPreferences.Editor editor = preferences.edit();////                                                editor.putInt("insert", 1);////                                                editor.apply();////                                                Log.d("dataInsertCall","dataInsertCall");////                                            }else{////                                                Log.d("not insert","not insert");////                                            }////                                        }//////                                        Toast.makeText(mService, "complete two min"+min, Toast.LENGTH_SHORT).show();////                                addHistory(String.valueOf(endDate));////                                    }////                        } catch (Exception e) {//                            // TODO Auto-generated catch block//                        }//                    }//                });//            }//        };//        timer.schedule(doAsynchronousTask, 0, 3000);//        //Toast.makeText(this, Constants.latForground+"ist", Toast.LENGTH_SHORT).show();        //   Update notification content if running as a foreground service.        if (serviceIsRunningInForeground(this)) {//           / mNotificationManager.notify(NOTIFICATION_ID, getNotification());            // Getting location when notification was call.//                double     latitude = location.getLatitude();//                double    longitude = location.getLongitude();            Constants.latForground= String.valueOf(location.getLatitude());            Constants.lngForground= String.valueOf(location.getLongitude());            Log.d("ddddddd","call");            Calendar     c = Calendar.getInstance();            SimpleDateFormat     df1 = new SimpleDateFormat("yyyy-MM-dd HH:mm ss");            String currentDate= df1.format(Calendar.getInstance().getTime());            try {                addHistory(currentDate);            } catch (ParseException e) {                e.printStackTrace();            }            //   Toast.makeText(this, Constants.latForground+"secnd"+ Constants.lngForground, Toast.LENGTH_SHORT).show();//            Log.e("lattttFor",Constants.latForground+"");//            Log.e("lnggggFor",Constants.lngForground+"");            // Here using to call Save to serverMethod            SavetoServer();            //   1000*60*60*24            ///        }    }    private void SavetoServer() {        FirebaseDatabase.getInstance().getReference().child("Child").addListenerForSingleValueEvent(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot snapshot) {                for (DataSnapshot snapshot1:snapshot.getChildren()){                    if (snapshot1.child("pin_genrate").getValue().toString().equals(Constants.pinID))                    {                        String str_key= snapshot1.getKey();                        Updatedata(str_key);                    }                }            }            @Override            public void onCancelled(@NonNull DatabaseError error) {            }        });    }    private void Updatedata(String str_Key) {        DatabaseReference ref = FirebaseDatabase.getInstance().getReference().child("Child").child(str_Key);        ref.child("latitutde").setValue(Constants.latForground);        ref.child("longitude").setValue(Constants.lngForground).addOnCompleteListener(new OnCompleteListener<Void>() {            @Override            public void onComplete(@NonNull Task<Void> task) {                if (task.isSuccessful()) {                    Log.d("Done","changes Don");                    //   Toast.makeText(context, "Location Updated foreground Successful", Toast.LENGTH_SHORT).show();                } else {                    Log.d("Failed","changes failed");                    //    Toast.makeText(context, "Location Updated foreground failed", Toast.LENGTH_SHORT).show();                }            }        }).addOnFailureListener(new OnFailureListener() {            @Override            public void onFailure(@NonNull Exception e) {                Log.d("Exception",e.getMessage());            }        });    }    /**     * Sets the location request parameters.     */    private void createLocationRequest() {        mLocationRequest = new LocationRequest();        mLocationRequest.setInterval(UPDATE_INTERVAL_IN_MILLISECONDS);        mLocationRequest.setFastestInterval(FASTEST_UPDATE_INTERVAL_IN_MILLISECONDS);        mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);    }    /**     * Class used for the client Binder.  Since this service runs in the same process as its     * clients, we don't need to deal with IPC.     */    public class LocalBinder extends Binder {        HistorySaveService getService() {            return HistorySaveService.this;        }    }    /**     * Returns true if this is a foreground service.     *     * @param context The {@link Context}.     */    public boolean serviceIsRunningInForeground(Context context) {        ActivityManager manager = (ActivityManager) context.getSystemService(                Context.ACTIVITY_SERVICE);        for (ActivityManager.RunningServiceInfo service : manager.getRunningServices(                Integer.MAX_VALUE)) {            if (getClass().getName().equals(service.service.getClassName())) {                if (service.foreground) {                    return true;                }            }        }        return false;    }    private void addHistory(String  startTime2) throws ParseException {        ///////////////////////        if (Constants.latForground.equals("") && Constants.lngForground.equals("")) {//            Toast.makeText(mService, "empty", Toast.LENGTH_SHORT).show();            return;        } else {            HistoryModel historyModel = new HistoryModel(Constants.latForground, Constants.lngForground, Constants.pinID, startTime2);            FirebaseDatabase.getInstance().getReference().child("History_Data").push().setValue(historyModel).addOnSuccessListener(                    new OnSuccessListener<Void>() {                        @Override                        public void onSuccess(Void aVoid) {                            Toast.makeText(getApplicationContext(), "History added", Toast.LENGTH_SHORT).show();                        }                    }            ).addOnFailureListener(new OnFailureListener() {                @Override                public void onFailure(@NonNull Exception e) {                    Toast.makeText(getApplicationContext(), e.getMessage(), Toast.LENGTH_SHORT).show();                }            });        }    }}